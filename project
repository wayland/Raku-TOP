#!/usr/bin/raku

# Run ./project --help for information

use	JSON::Fast;

class	MethodLoc {
	has	Str	$.class;
	has	Str	$.methodname;
	has	Str	$.filename;
	has	Str	$.classtype;
	has		$.drivertype;
	has	Int	$.lineno;
}

# >>= TOP:ver<0.0.1>:auth<zef:wayland>
grammar	FezListItem {
	rule	TOP ($module)	{ '>>=' <.ws> $module <parameter>+ }
	rule	parameter	{ ':' <param-name> '<' <param-value> '>' }
	rule	param-name	{ \w+ }
	rule	param-value	{ <[\w:.]>+ }
}
class	FezListItemActions {
	method	TOP($match) {
		$match.make: $match<parameter>».made;
	}
	method	parameter($/) {
#		printf "Got %s -- %s\n", $/<param-name>, $/<param-value>;
		make $/<param-name>.made => $/<param-value>.made;
	}
	method	param-name($/)	{ make ~$/; }
	method	param-value($/)	{ make ~$/; }
}

role	AsyncProcess {
	has	Str	$!name		is built is required;
	has	Str	$!version	is built is required;

	has	$!promise;
	has	$!result;

	# $.priority is a guess as to how long a process will take; if it'll take longer, give it a higher priority, and
	# it will be run first and awaited last

	method	start() {
		$!promise = start { self.start-process(); }
	}

	method	check(Str @problems) {
		my ($success, @data) = await $!promise;
		if ! $success {
			@problems.push: "Can't create release '{$!version}': " ~ self.error-message();
		}
	}
}

# Run a build/test and see if there are any errors running the tests
class	Process::Build does AsyncProcess {
	has	$.priority = 0;
	has	$!results;

	method	start-process() {
		$!result = MAIN('build') and MAIN('stop') and MAIN('test');
		$!result and return False, $!result;
		return True, Nil;
	}

	method	error-message() {
		return $!result;
	}
}

# Get list of existing fez versions so that we can ensure we're not releasing an existing version
class	Process::FezList does AsyncProcess {
	has	$.type = 'fez';
	has	$.priority = 1;

	method	start-process() {
		my @lines = qqx{fez list}.lines;
		my %versions;
		for @lines -> $line {
			my %params = FezListItem.parse(
				$line,
				:args(@($!name)),
				actions => FezListItemActions.new(),
			).made;
			%versions{%params<ver>} = 1;
		}
		return %versions{$!version}.not, %versions{$!version};
	}

	method	error-message() {
		return 'A fez version with this ID already exists';
	}
}

# Run fez review so we can quit if it finds any problems
class	Process::FezReview does AsyncProcess {
	has	$.type = 'fez';
	has	$.priority = 2;

	method	start-process() {
		my @lines = qqx{fez review}.lines;
		return ! $!, @lines;
	}

	method	error-message() {
		return 'Fez review failed';
	}
}

# Check the git tags to see if we've already tagged this version there
class	Process::GitTag does AsyncProcess {
	has	$.type = 'git';
	has	$.priority = 3;

	method	start-process() {
		my %tags = qqx{git tag -l v*}.lines.map: -> $_ is copy { s/^v//; $_ => 1 };
		return %tags{$!version}.not, %tags{$!version};
	}

	method	error-message() {
		return "A git tag for this version already exists";
	}
}

# Check whether any code needs to be checked in
class	Process::GitStatus does AsyncProcess {
	has	$.type = 'git';
	has	$.priority = 4;

	method	start-process() {
		my $result = qqx{git status --porcelain};
		return $result.not, $result;
	}

	method	error-message() {
		return "'git status' says some code still needs to be checked in";
	}
}

multi	MAIN('release', Str :$skip = '') { #= Create a release, including pushing to github and fez.  
	# Create %skips
	split(/\,/, $skip) ==> map({ $_ => 1 }) ==> my %skips;

	# Fetch version from META6.json
	my %metadata = from-json("META6.json".IO.slurp);
#	say %metadata;

	# Set up process classes
	my %process-classes = %(
# TODO: The build stuff was causing weird errors; revisit when I upgrade the raku version on my local
#		Build => Process::Build.new(
#			name    => %metadata<name>,
#			version => %metadata<version>,
#		),
		# Get list of existing fez versions so that we can ensure we're not releasing an existing version
		FezList => Process::FezList.new(
			name    => %metadata<name>,
			version => %metadata<version>,
		),
		# Run fez review so we can quit if it finds any problems
		FezReview => Process::FezReview.new(
			name    => %metadata<name>,
			version => %metadata<version>,
		),
		# Check the git tags to see if we've already tagged this version there
		GitTag => Process::GitTag.new(
			name    => %metadata<name>,
			version => %metadata<version>,
		),
		# Check whether any code needs to be checked in
		GitStatus => Process::GitStatus.new(
			name    => %metadata<name>,
			version => %metadata<version>,
		),
	);

	# Start processes in order of priority
	for %process-classes.sort(*.value.priority)».kv -> ($key, $value) {
		%skips{$value.type}:exists and do {
			say "Skipping $key because we're skipping {$value.type}";
			next;
		};
		say "Starting $key ...";
		$value.start();
	}

	# Collate promised answers into @problems (reverse order of priority
	my Str @problems;
	for %process-classes.sort(-*.value.priority)».kv -> ($key, $value) {
		%skips{$value.type}:exists and do {
			say "Skipping $key because we're skipping {$value.type}";
			next;
		};
		say "Waiting for $key";
		$value.check(@problems);
	}
	# If there were problems, die
	@problems.elems > 0 and do {
		@problems ==> map { "$_\n" } ==> join '' ==> die;
	};

	# Finally ready to go
	%skips{'git'}:exists or do {
		do_cmd(sprintf(qq{git tag 'v%s'}, %metadata<version>), die => True);
		do_cmd(qq{git push --tags}, die => True);
	};
	%skips{'fez'}:exists or do {
		do_cmd(qq{fez upload}, die => True);
	};
	say "Next you may want to run: zef update && zef install TOP --force-install";
}

multi	MAIN('build-docs', @filenames?) { #= Rebuilds documentation (docs dir and READMEs) from rakumod files
	# Set up
	my %doc-types = %(
		Markdown => 'md',
		HTML => 'html',
		Text => 'txt',
	);

	# Generate lists of source files
	my (@class-source-files) = qx{find lib \( -name '*.raku' -o -name '*.rakumod' \)}.lines;

	# Set up for processing READMEs
	my $readme-text = 'README.rakudoc'.IO.slurp;

	# Generate documentation
	for %doc-types.kv -> $format-name, $format-extension {
		# Generate Class References
		my (@class-pod);
		for @class-source-files -> $sourcefile {
			my ($basename, $target-file) = build-docs($format-name, $format-extension, 'Class', $sourcefile);

			push @class-pod, "=item L<class {$basename}|{$target-file}>"
		}

		# Generate Introductory Docs

		# Generate READMEs
		my %includes = %(
			class-refs => join("\n", @class-pod),
			intro-docs => 'L<Raku Introductory Docs|https://wayland.github.io/table-oriented-programming/Raku-TOP/Introduction.xml>',
		);

		my $this-readme-text = $readme-text;
		$this-readme-text ~~ s:g/\#include\s+(<[\w\-]>+)/{%includes{$0}}/;
		build-docs($format-name, $format-extension, 'README', 'README.rakudoc', source-text => $this-readme-text);
	}

}

multi	MAIN('find-common') { #= Finds the methods which are the same across all database drivers
	# Locate methods in files and classes/roles
	my (@files-to-check) = qx{find lib/raku/Database/Driver -name '*.rakumod'}.lines;
	push @files-to-check, 'lib/raku/Database/Driver.rakumod';

	my @methodlocs;
	for @files-to-check -> $file {
		say "File: $file";
		my ($currentclass, $classtype, $drivertype);
		my $lineno = 0;
		for $file.IO.lines -> $line {
			$lineno++;
			$line ~~ /^\s*(role|class)\s+ $<classname> = (<[\w:]>+)/ and do {
				my $thisclass = ~$/<classname>;
				$line ~~ /\{$/ or next;
				$currentclass = $thisclass;
				my $d;
				($classtype, $d, $drivertype) = $thisclass.split(/\:\:/);
			}
			$line ~~ /
				[multi\s+|sub|<?>]method\s+
				$<method> = [<[\w-]>+].*
			/ and do {
				my $method = ~$<method>;
				defined($drivertype) and $line ~~ /\}$/ and next;
				push @methodlocs, MethodLoc.new(
					class => $currentclass,
					methodname => $method,
					lineno => $lineno,
					filename => $file,
					classtype => $classtype,
					drivertype => $drivertype,
				);
			};
		}
	}

	# Loop over methods and categorise
	my %groups;
	for @methodlocs -> $ml {
		push %groups{$ml.classtype ~ $ml.methodname}, $ml;
	}
	GROUP: for %groups.kv -> $key, @group {
		@group.elems > 1 and do {
			for @group -> $methodloc {
				defined($methodloc.drivertype) or next GROUP;
			}
			#dd @group;
			for @group -> $methodloc {
				FIRST {
					printf "%s.%s:\n", $methodloc.classtype, $methodloc.methodname;
				}
				printf "\t%s: %s\n", $methodloc.filename, $methodloc.lineno;
			}
		};
	}
}

my $docker_compose_command = "docker-compose -f testing/docker/docker-compose.yml --project-directory .";

multi	MAIN('test') { #= Runs the tests for the project in a docker container.  This means we can run them as a github action, and easily change raku versions
	do_cmd("$docker_compose_command up -d");
	my $project-name = $*CWD.IO.basename.lc;
	for <01-basic-table.rakutest 02-formatters-parsers.rakutest> -> $testfile {
		do_cmd("docker exec {$project-name}_raku_1 /bin/bash -lc ./$testfile 2>&1");
	}
}

multi	MAIN('build') { #= Build the docker image
	do_cmd("$docker_compose_command build raku");
}

multi	MAIN('stop') { #= Stops the docker-compose project
	do_cmd("$docker_compose_command down");
}

sub	do_cmd($cmd, :$level = 1, :$use = 'shell', :$die = False) {
	print "+" x $level;
	say " $cmd";
	given $use {
		when 'shell' {
			shell $cmd;
		}
		when 'qqx' {
			print qqx{$cmd};
		}
	}
	$die and $! and die "Command failed!";

	return $!;
}

sub	build-docs($format-name, $format-extension, $type, $sourcefile, :$source-text = Nil) {
	my $basename = $sourcefile.IO.basename;
	$basename ~~ s/\.raku(mod|doc)$// or die "File with unrecognised extension: $basename";

	my $target-file = $type eq 'README' 
		?? "README.$format-extension"
		!! "docs/$format-name/$type/$basename.$format-extension";
	my $use-source-text;
	if ($source-text ~~ Nil) {
		$use-source-text = $sourcefile.IO.slurp;
		do_cmd("cat $sourcefile | RAKULIB=lib/raku raku --doc=$format-name - > $target-file", use => 'qqx');
	} else {
		$use-source-text = $source-text;
		my $p = shell "RAKULIB=lib/raku raku --doc=$format-name - > $target-file", :in;
		$p.in.say: $source-text;
		$p.in.close;
		say "Generated $target-file from source text";
	}

	##### GENERATE POD TABLE OF CONTENTS
	# ATTEMPT 2
	# This is the approach, but it needs a newer Raku
	# Drawn from https://github.com/Raku/doc/blob/main/xt/rakuast-validate.rakutest (start reading at the bottom of the file
#	for $use-source-text.AST.rakudoc -> $pod {
#		dd $pod
#	}

	# ATTEMPT 1
	# Not sure if this might be useful as a component in attempt 2, above; 
#	use	Pod::Contents;
#	say "Got: " ~ join_pod_contents_of $use-source-text, 'TITLE';

	return [$basename, $target-file];
}


#!/usr/bin/raku

multi	MAIN('build-docs', @filenames?) {
	# Set up
	my %doc-types = %(
		Markdown => 'md',
		HTML => 'html',
		Text => 'txt',
	);

	# Generate lists of source files
	my (@class-source-files) = qx{find lib \( -name '*.raku' -o -name '*.rakumod' \)}.lines;

	# Set up for processing READMEs
	my $readme-text = 'README.rakudoc'.IO.slurp;

	# Generate documentation
	for %doc-types.kv -> $format-name, $format-extension {
		# Generate Class References
		my (@class-pod);
		for @class-source-files -> $sourcefile {
			my ($basename, $target-file) = build-docs($format-name, $format-extension, 'Class', $sourcefile);

			push @class-pod, "=item L<class {$basename}|{$target-file}>"
		}

		# Generate Introductory Docs

		# Generate READMEs
		my %includes = %(
			class-refs => join("\n", @class-pod),
			intro-docs => 'ids',
		);

		my $this-readme-text = $readme-text;
		$this-readme-text ~~ s:g/\#include\s+(<[\w\-]>+)/{%includes{$0}}/;
		build-docs($format-name, $format-extension, 'README', 'README.rakudoc', source-text => $this-readme-text);
	}

}

multi	MAIN($action) {
	my $docker_compose_command = "docker-compose -f testing/docker/docker-compose.yml --project-directory .";

	given ($action) {
		when 'test' {
			do_cmd("docker exec raku_raku_1 /bin/bash -lc ./table-tests.rakutest");
		}
		when 'build' {
			do_cmd("$docker_compose_command build raku");
		}
		when 'stop' {
			do_cmd("$docker_compose_command down");
		}
		default {
			die "Unknown action '$action'";
		}
	}
}

sub	do_cmd($cmd, $level = 1) {
	print "+" x $level;
	say " $cmd";
	print qqx{$cmd};

	return $!;
}

sub	build-docs($format-name, $format-extension, $type, $sourcefile, :$source-text = Nil) {
	my $basename = $sourcefile.IO.basename;
	$basename ~~ s/\.raku(mod|doc)$// or die "File with unrecognised extension: $basename";

	my $target-file = $type eq 'README' 
		?? "README.$format-extension"
		!! "docs/$format-name/$type/$basename.$format-extension";
	if ($source-text ~~ Nil) {
		do_cmd("cat $sourcefile | RAKULIB=lib/raku raku --doc=$format-name - > $target-file");
	} else {
		my $p = shell "RAKULIB=lib/raku raku --doc=$format-name - > $target-file", :in;
		$p.in.say: $source-text;
		$p.in.close;
		say "Generated $target-file from source text";
	}

	return [$basename, $target-file];
}

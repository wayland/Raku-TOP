#!/usr/bin/raku

use v6.e.PREVIEW;

use	Test;
use	CSV::Parser;

use	lib 'lib/raku';
use	TOP;

say "Prepping for tests";

my $full_filename = 'all-countries.csv';
my $file_handle = open $full_filename, :r;
my $parser = CSV::Parser.new(
                :$file_handle,
                :contains_header_row,
                );
my @rows;
until $file_handle.eof {
	my %data;
	for $parser.get_line().kv -> $key, $value {
		%data{$key} = $key ~~ /\-code$/ ?? << $value >> !! $value;
	};
	@rows.push(%data);
}

my %tables;
my $pgdb;
subtest {
	plan 2;

	$pgdb = Database.new(
		backend => 'Postgres',
		parameters => {
			database-name => 'raku_top',
			username => 'postgres',
		}
	);
	isa-ok($pgdb, Database, 'Database.new() returns a Database');
	say "== HERE ==";
	dd $pgdb.backend-object.handle.execute("SELECT table_name FROM information_schema. tables WHERE table_schema='public'").allrows();
	# If the docker container didn't persist the database, then this wouldn't be necessary, and would fail
	$pgdb.backend-object.handle.execute("DROP TABLE IF EXISTS countries");

	%tables = %(
#		CSV => Table.new(
#				filename => $full_filename,
#				backend => 'CSV',
#				),
		Memory => Table.new(name => 'countries', action => 'can-create'),
		Postgres => $pgdb.useTable(name => 'countries'),
	);

	use-ok 'TOP';
}, "Test loading of modules";

for <Memory Postgres> -> $type {
	say "Type $type";
	my Table $table := %tables{$type};
say "l1";
	dd $table;
say "l2";
#	say $table.backend-object;
say "l3";
	subtest {
		plan 10;

say "l4";
		lives-ok({ $table.fill_from_aoh(@rows) }, "Didn't die when filling from array-of-hash");
		isa-ok($table, Table, "Creating $type table without database works");
		does-ok($table, Relation, 'Table is a Relation');

		dd $table[0];

		is($table[0]<name>, 'Afghanistan', 'Test access by row, then column');
		is($table<name>[0], 'Afghanistan', 'Test access by column, then row');

		# Now need to test setting
		lives-ok({ $table[0]<name> = 'Narnia' }, "Didn't die when setting by row, then column");
		$table[0]<name> = 'Narnia';
		is($table<name>[0], 'Narnia', "...and when fetching by column, then row, got the same result");

		lives-ok({ $table<name>[0] = 'Middle-Earth' }, "Didn't die when setting by column, then row");
		is($table[0]<name>, 'Middle-Earth', "...and when fetching by row, then column, got the same result");

		is($table.fields.elems, 11, "Found 11 fields in the CSV file");
	}, "Testing $type";
	$type eq 'Postgres' and do {
		my $sth = $table.backend-object.query("SELECT * FROM countries LIMIT 5;");
		dd $sth.allrows(:array-of-hash);
	};
}
